// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var Client, a, bitcoinClient, e, iced, parallelAddresses, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Client = require('bitcoin').Client;

  bitcoinClient = new Client({
    host: "localhost",
    port: 8332,
    user: "swthomas",
    pass: "hurpledurple",
    ssl: false,
    sslStrict: false
  });

  parallelAddresses = function(cb) {
    var addresses, errors, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    addresses = [];
    errors = [];
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/sheldonthomas/Documents/Resplendent/icedcoffeescript/src/script.iced"
        });
        bitcoinClient.getAccountAddress("sheldon", __iced_deferrals.defer({
          assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
            return function() {
              __slot_1[__slot_2] = arguments[0];
              return __slot_3[__slot_4] = arguments[1];
            };
          })(errors, 0, addresses, 0),
          lineno: 15
        }));
        bitcoinClient.getAccountAddress("murph", __iced_deferrals.defer({
          assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
            return function() {
              __slot_1[__slot_2] = arguments[0];
              return __slot_3[__slot_4] = arguments[1];
            };
          })(errors, 1, addresses, 1),
          lineno: 16
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(errors, addresses);
      };
    })(this));
  };

  a = [];

  e = [];

  parallelAddresses(function(e, a) {
    console.log(e);
    return console.log(a);
  });

}).call(this);
